summarize(mean_boarding=mean(boarding))
data
knitr::opts_chunk$set(echo = TRUE)
# Load the data and package
library(ggplot2)
library(tidyverse)
capmetro = read.csv("data/capmetro_UT.csv")
# Extract the month and year
tem = capmetro$timestamp[1]
month_func = function(my_str){
return(as.numeric(strsplit(my_str, "-", fixed=TRUE)[[1]][2]))
}
hour_func = function(my_str){
detailed_time = strsplit(my_str, " ", fixed=TRUE)[[1]][2]
hour = as.numeric(strsplit(detailed_time, ":", fixed=TRUE)[[1]][1])
return(hour)
}
capmetro$month = apply(array(capmetro$timestamp),1,month_func)
capmetro$hour = apply(array(capmetro$timestamp),1,hour_func)
data = capmetro
data_summary = data %>%
group_by(hour,month,day) %>%
summarize(mean_boarding=mean(boarding))
data_summary
data_summary = data %>%
group_by(hour,day_of_week,month) %>%
summarize(mean_boarding=mean(boarding))
data_summary
# Calculate average boardings
data_summary = data %>%
group_by(hour,day_of_week,month) %>%
summarize(mean_boarding=mean(boarding))
print(data_summary[1:18,])
knitr::opts_chunk$set(echo = TRUE)
# Load the data and package
library(ggplot2)
library(tidyverse)
capmetro = read.csv("data/capmetro_UT.csv")
# Extract the month and year
tem = capmetro$timestamp[1]
month_func = function(my_str){
return(as.numeric(strsplit(my_str, "-", fixed=TRUE)[[1]][2]))
}
hour_func = function(my_str){
detailed_time = strsplit(my_str, " ", fixed=TRUE)[[1]][2]
hour = as.numeric(strsplit(detailed_time, ":", fixed=TRUE)[[1]][1])
return(hour)
}
capmetro$month = apply(array(capmetro$timestamp),1,month_func)
capmetro$hour = apply(array(capmetro$timestamp),1,hour_func)
# Select data from certain periods
logi = capmetro$month>=9 &  capmetro$month<=11
data = capmetro[logi,]
data_summary = data %>%
group_by(hour,day_of_week,month) %>%
summarize(mean_boarding=mean(boarding))
print(data_summary[1:18,])
# Calculate average boardings
data_summary = data %>%
group_by(hour,day_of_week,month) %>%
summarize(mean_boarding=mean(boarding))
print(data_summary[1:5,])
knitr::opts_chunk$set(echo = TRUE)
# Load the data and package
library(ggplot2)
library(tidyverse)
capmetro = read.csv("data/capmetro_UT.csv")
# Extract the month and year
tem = capmetro$timestamp[1]
month_func = function(my_str){
return(as.numeric(strsplit(my_str, "-", fixed=TRUE)[[1]][2]))
}
hour_func = function(my_str){
detailed_time = strsplit(my_str, " ", fixed=TRUE)[[1]][2]
hour = as.numeric(strsplit(detailed_time, ":", fixed=TRUE)[[1]][1])
return(hour)
}
capmetro$month = apply(array(capmetro$timestamp),1,month_func)
capmetro$hour = apply(array(capmetro$timestamp),1,hour_func)
# Select data from certain periods
logi = capmetro$month>=9 &  capmetro$month<=11
data = capmetro[logi,]
data_summary = data %>%
group_by(hour,day_of_week,month) %>%
summarize(mean_boarding=mean(boarding))
print(data_summary[1:5,])
data_summary
data_summary$month
data_summary$month = factor(data_summary$month)
p0 = ggplot(data=data_summary,aes(x=hour,y=mean_boarding,group=month,color=month))+ geom_line()+facet_wrap(~day_of_week, nrow=4)+ggtitle("Mean Boarding in different time intervals")+theme(plot.title = element_text(hjust = 0.5))
p0
p0
data$weekend
data$weekend[1]
data
data$hour
min(data$hour)
max(data$hour)
model
knitr::opts_chunk$set(echo = TRUE)
#We first load data.
library(tidyverse)
library(ggplot2)
library(rsample)
library(mosaic)
library(ModelMetrics)
data(SaratogaHouses)
# Metric definition(Use a number to evaluate the performance of a certain model),rmse is adopted.
library(caret)
evaluate_func = function(my_str,data){
set.seed(100)
indexs = createFolds(1:dim(data)[1], k = 5, list = TRUE, returnTrain = FALSE)
err_result = c()
for (i in 1:5){
test_data = data[indexs[[i]],]
train_data = data[-indexs[[i]],]
lm_model = lm(as.formula(my_str), data=train_data)
err = rmse(lm_model, test_data)
err_result = c(err_result,err)
}
return(mean(err_result))
}
middle_str = "price ~ lotSize + age + livingArea + bedrooms +
fireplaces + bathrooms + rooms + heating + fuel + centralAir"
#print(evaluate_func(middle_str,SaratogaHouses))
# x_names = colnames(SaratogaHouses)[2:length(colnames(SaratogaHouses))]
# y_name = "price"
# count = 0
# rmse_record = Inf
# best_name = ""
# best_test_str = ""
# best_record_previous = Inf
# result_collect = c()
#
# while(TRUE){
#   for (name in x_names){
#     if (count == 0){
#      test_str = paste(y_name,"~",name,sep="")
#     }
#     else{
#      test_str = paste(y_name,"+",name,sep="")
#     }
#     err = evaluate_func(test_str,SaratogaHouses)
#     if (err<rmse_record){
#       rmse_record = err
#       best_name = name
#       best_test_str = test_str
#     }
#   }
#   if (rmse_record<best_record_previous){
#     best_record_previous = rmse_record
#   }
#   else{
#     break
#   }
#   y_name = best_test_str
#   result_collect = c(result_collect,c(y_name,rmse_record))
#   count = count + 1
#   x_names = setdiff(x_names,best_name)
#   if (length(x_names)==0){
#     break
#   }
# }
# print(result_collect)
best_str = "price~livingArea+landValue+bathrooms+waterfront+newConstruction+
heating+lotSize+centralAir+age+rooms+bedrooms+fuel+pctCollege+sewer+fireplaces"
# "price~livingArea+landValue+bathrooms+waterfront+newConstruction+
# heating+lotSize+centralAir+age+rooms+bedrooms+fuel+pctCollege+sewer+fireplaces"
# Error:57828.05
lm_model = lm(as.formula(best_str), data=SaratogaHouses)
summary(lm_model)
library(kknn)
knn_evaluate_func = function(my_str,data){
set.seed(100)
indexs = createFolds(1:dim(data)[1], k = 5, list = TRUE, returnTrain = FALSE)
err_result = c()
for (i in 1:5){
test_data = data[indexs[[i]],]
train_data = data[-indexs[[i]],]
model = train.kknn(as.formula(my_str),train_data,scale = TRUE)
test_prediction = predict(model,test_data)
test_actual = test_data$price
err = rmse(actual=test_actual, predicted=test_prediction)
err_result = c(err_result,err)
}
return(mean(err_result))
}
# x_names = colnames(SaratogaHouses)[2:length(colnames(SaratogaHouses))]
# y_name = "price"
# count = 0
# rmse_record = Inf
# best_name = ""
# best_test_str = ""
# best_record_previous = Inf
# result_collect = c()
#
# while(TRUE){
#   for (name in x_names){
#     if (count == 0){
#      test_str = paste(y_name,"~",name,sep="")
#     }
#     else{
#      test_str = paste(y_name,"+",name,sep="")
#     }
#     err = knn_evaluate_func(test_str,SaratogaHouses)
#     if (err<rmse_record){
#       rmse_record = err
#       best_name = name
#       best_test_str = test_str
#     }
#   }
#   if (rmse_record<best_record_previous){
#     best_record_previous = rmse_record
#   }
#   else{
#     break
#   }
#   y_name = best_test_str
#   result_collect = c(result_collect,c(y_name,rmse_record))
#   count = count + 1
#   x_names = setdiff(x_names,best_name)
#   if (length(x_names)==0){
#     break
#   }
# }
# print(result_collect)
best_str = "price~livingArea+landValue+age+pctCollege+waterfront+newConstruction"
# "price~livingArea+landValue+age+pctCollege+waterfront+newConstruction"
# 58061.7316651973
model = train.kknn(as.formula(best_str),SaratogaHouses,scale = TRUE)
summary(model)
model.tables()
model.tables
model.weights
coef(model)
library(vcd)
library(ggplot2)
library(tidyverse)
german_credit <- read.csv("data/german_credit.csv",stringsAsFactors=TRUE)
summary(german_credit)
# Default：300 Not Default: 700
View(german_credit)
table(german_credit$Default)
knitr::opts_chunk$set(echo = TRUE)
library(vcd)
library(ggplot2)
library(tidyverse)
german_credit <- read.csv("data/german_credit.csv",stringsAsFactors=TRUE)
summary(german_credit)
# Default：300 Not Default: 700
counts <- table(german_credit$history)
counts
# good: 89 poor:618 terrible: 293
ggplot(german_credit, aes(history, ..count..)) +
geom_bar(aes(fill = as.factor(Default)), position = "dodge")
knitr::opts_chunk$set(echo = TRUE)
library(vcd)
library(ggplot2)
library(tidyverse)
german_credit <- read.csv("data/german_credit.csv",stringsAsFactors=TRUE)
# Default：300 Not Default: 700
counts <- table(german_credit$history)
# good: 89 poor:618 terrible: 293
ggplot(german_credit, aes(history, ..count..)) +
geom_bar(aes(fill = as.factor(Default)), position = "dodge")
fit.logit <- glm( Default ~ duration + amount + installment + age + history + purpose + foreign, family = binomial(), data=german_credit)
summary(fit.logit)
coef(fit.logit)
coef(fit.logit) %>% round (3)
exp(coef(fit.logit))
model <- glm( Default ~ duration + amount + installment + age + history + purpose + foreign, family = binomial(), data=german_credit)
summary(fit.logit)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(ModelMetrics)
library(caret)
library(lubridate)
library(plotROC)
hotelsdev = read.csv("data/hotels_dev.csv",stringsAsFactors=TRUE)
evaluate_func = function(my_str,data){
set.seed(100)
indexs = createFolds(1:dim(data)[1], k = 5, list = TRUE, returnTrain = FALSE)
err_result = c()
for (i in 1:5){
test_data = data[indexs[[i]],]
train_data = data[-indexs[[i]],]
model = glm(as.formula(my_str), data=train_data,family = "binomial")
truth = test_data$children
prediction = predict(model,newdata = test_data,type = "response")
err_result = c(err_result,f1Score(truth,prediction))
}
return(mean(err_result))
}
baseline_1_str = "children ~ market_segment + adults + customer_type + is_repeated_guest"
model = glm(as.formula(baseline_1_str),data=hotelsdev,family = "binomial")
prediction = predict(model,type = "response")
truth = hotelsdev$children
print(evaluate_func(baseline_1_str,hotelsdev))
baseline_2_str = "children ~ (. - arrival_date)"
model = glm(as.formula(baseline_2_str),data=hotelsdev,family = "binomial")
prediction = predict(model,type = "response")
truth = hotelsdev$children
print(evaluate_func(baseline_2_str,hotelsdev))
hotelsdev = mutate(hotelsdev,
arrival_date = ymd(arrival_date))
hotelsdev = mutate(hotelsdev,
wday = wday(arrival_date) %>% factor(),
day = day(arrival_date) %>% factor(),
month = month(arrival_date) %>% factor(),
year = year(arrival_date))
hotelsdev$arrival_date = as.character(hotelsdev$arrival_date)
hotelsdev <- subset(hotelsdev, select = -c(arrival_date))
# x_names = colnames(hotelsdev)[-6]
# y_name = "children"
# count = 0
# rmse_record = 0
# best_name = ""
# best_test_str = ""
# best_record_previous = 0
# result_collect = c()
#
# while(TRUE){
#   for (name in x_names){
#     if (count == 0){
#       test_str = paste(y_name,"~",name,sep="")
#     }
#     else{
#       test_str = paste(y_name,"+",name,sep="")
#     }
#     err = evaluate_func(test_str,hotelsdev)
#     if (err>rmse_record){
#       rmse_record = err
#       best_name = name
#       best_test_str = test_str
#     }
#   }
#   if (rmse_record>best_record_previous){
#     best_record_previous = rmse_record
#   }
#   else{
#     break
#   }
#   y_name = best_test_str
#   result_collect = c(result_collect,c(y_name,rmse_record))
#   if (rmse_record>0.505){
#     break
#   }
#   print(c(y_name,rmse_record))
#   count = count + 1
#   x_names = setdiff(x_names,best_name)
#   if (length(x_names)==0){
#     break
#   }
# }
print("children~reserved_room_type+hotel+previous_cancellations+booking_changes")
best_str = "children~reserved_room_type+hotel+previous_cancellations+booking_changes"
model = glm(as.formula(best_str),data=hotelsdev,family = "binomial")
prediction = predict(model,type = "response")
truth = hotelsdev$children
print(evaluate_func(best_str,hotelsdev))
best_str = "children~reserved_room_type+hotel+previous_cancellations+booking_changes"
model = glm(as.formula(best_str),data=hotelsdev,family = "binomial")
# Then we load hotels_val to conduct validation and draw ROC graph.
hotelsval = read.csv("data/hotels_val.csv")
prediction = predict(model,newdata = hotelsval,type = "response")
truth = hotelsval$children
roc_data = cbind(truth,prediction)
roc_data = data.frame(roc_data)
basicplot <- ggplot(roc_data, aes(d = truth,m = prediction))+ geom_roc()
advanced_plot = basicplot +
style_roc(theme = theme_grey) +
theme(axis.text = element_text(colour = "blue"),plot.title = element_text(hjust = 0.5))+
annotate("text", x = .75, y = .25,label = paste("AUC =", round(calc_auc(basicplot)$AUC, 2))) +
scale_x_continuous("FPR", breaks = seq(0, 1, by = .1))
advanced_plot
best_str = "children~reserved_room_type+hotel+previous_cancellations+booking_changes"
model = glm(as.formula(best_str),data=hotelsdev,family = "binomial")
# Then we load hotels_val to conduct validation and draw ROC graph.
hotelsval = read.csv("data/hotels_val.csv")
set.seed(100)
indexs = createFolds(1:dim(hotelsval)[1], k = 20, list = TRUE, returnTrain = FALSE)
err_result = c()
for (i in 1:20){
slice_data = hotelsval[indexs[[i]],]
prediction = predict(model,newdata = slice_data,type = "response")
predict_num = mean(prediction)*dim(slice_data)[1]
### expected number of bookings with children for that fold.
actual_num = sum(slice_data$children)
err_result = rbind(err_result,c(actual_num,predict_num))
}
err_result = data.frame(err_result)
colnames(err_result)=c("actual_num","predict_num")
err_result$difference = err_result$predict_num-err_result$actual_num
print(err_result)
p0 = ggplot(data=err_result) +
geom_histogram(aes(x=difference))
p0
library(ggplot2)
library(tidyverse)
capmetro = read.csv("data/capmetro_UT.csv")
knitr::opts_chunk$set(echo = TRUE)
library(vcd)
library(ggplot2)
library(tidyverse)
german_credit <- read.csv("data/german_credit.csv",stringsAsFactors=TRUE)
# Default：300 Not Default: 700
counts <- table(german_credit$history)
# good: 89 poor:618 terrible: 293
german_credit
german_credit$Default
data_summary = german_credit %>%
group_by(history) %>%
summarize(mean_default=mean(Default))
data_summary
data_summary = german_credit %>%
group_by(history) %>%
summarize(mean_default=mean(Default))
p0 = ggplot(german_credit)+geom_bar(aes(x=history,y=mean_default))
p0
data_summary = german_credit %>%
group_by(history) %>%
summarize(mean_default=mean(Default))
p0 = ggplot(data_summary)+geom_bar(aes(x=history,y=mean_default))
p0
data_summary
p0 = ggplot(data_summary,aes(x=history,y=mean_default))+geom_bar()
p0
p0 = ggplot(data_summary,aes(x=history,y=mean_default))+geom_col()
p0
knit_with_parameters('G:/UT-Austin2020-2021研究生一年级/ECO395M_DATA MININGSTAT LEARNING/garbage/MyExercise2每道题分开写/MyExercise2每道题分开写/Problem 1.Rmd')
install.packages(c("dummies", "jtools", "kableExtra", "margins"))
install.packages("mathjaxr")
library(Biostrings)
library(stringi)
seq1="AAAAAGGGG"
seq2="AAAACCCCCGGGGG"
seq3 = "AAAAACCCGGGG"
xx=pairwiseAlignment(pattern = c(seq1,seq3),subject = seq3)
xx
xx@pattern
xx@pattern[1]
xx@pattern[2]
PairwiseAlignmentsSingleSubjectSummary(xx)
PairwiseAlignmentsSingleSubjectSummary(xx@pattern)
class(xx)
xx@pattern@range
xx@pattern@mismatch
summary(xx)
score(xx)
mismatchTable(xx)
yy=mismatchTable(xx)
yy$PatternId
yy$PatternStart
nwdemo <-  pairwiseAlignment(AAString("PAWHEAE"), AAString("HEAGAWGHEE"), substitutionMatrix = BLOSUM50,                     gapOpening = 0, gapExtension = 8)
?pairwiseAlignment
?Txdb
12*(164/100)^(0.25)
12*(110/100)^(0.25)
\begin{table}[!htbp]
\caption{ADF test of the residuals from regression r3 r1}
\footnotesize
\begin{center}
\begin{tabular}{ccccc}
\hline
number of lags & type of regression  & 5\% critical value & Z(t)   & Conclusion                    \\ \hline
15             & with drift no trend & -3.34              & -5.335 & Reject unit root in residuals \\ \hline
\end{tabular}
\end{center}
\end{table}
knitr::opts_chunk$set(echo = TRUE)
### Load packages
library(RStata)
library(ggplot2)
library(tidyverse)
library(foreign)
options("RStata.StataVersion" = 16)
options("RStata.StataPath" = "\"C:\\Program Files\\Stata16\\StataIC-64\"")
stata("q1_a.do",data.in = NULL,data.out = FALSE)
source('~/.active-rstudio-document', echo=TRUE)
library(BSgenome)
library(Biostrings)
BiocManager::install("BSgenome")
library(BSgenome)
browseVignettes("BSgenome")
library(BSgenome.Celegans.UCSC.ce2
)
?available.genomes
available.genomes()
installed.genomes("BSgenome.Ecoli.NCBI.20080805"       )
installed.genomes("BSgenome.Ecoli.NCBI.20080805"       ,FALSE)
installed.genomes("BSgenome.Ecoli.NCBI.20080805"       ,splitNameParts =  FALSE)
installed.genomes("BSgenome.Ecoli.NCBI.20080805"       ,splitNameParts =  TRUE)
available.genomes()
installed.genomes()
getBSgenome("BSgenome.Ecoli.NCBI.20080805"  )
install("BSgenome.Ecoli.NCBI.20080805")
library(BiocManager)
install("BSgenome.Ecoli.NCBI.20080805")
installed.genomes()
getBSgenome("BSgenome.Ecoli.NCBI.20080805")
xx=getBSgenome("BSgenome.Ecoli.NCBI.20080805")
dim(xx)
xx
xx@single_sequences
str(xx)
setwd("G:/UT-Austin2020-2021研究生一年级/ECO395M_DATA MININGSTAT LEARNING/homeworks/datamining_hk3")
# \section{Predictive model building: green certification}
### Load the data
library(ggplot2)
library(tidyverse)
original_data = read.csv("data/greenbuildings.csv")
